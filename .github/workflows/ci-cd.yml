name: Flutter CRM CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  FLUTTER_VERSION: '3.24.5'

jobs:
  # Code Quality & Analysis
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Analyze code
      run: flutter analyze --no-fatal-infos
      
    - name: Check code formatting
      run: dart format --set-exit-if-changed .
      
    - name: Run tests
      run: flutter test --coverage

  # Build for Multiple Platforms
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [android, web, ios, macos, windows]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Build ${{ matrix.platform }}
      run: |
        case "${{ matrix.platform }}" in
          "android")
            flutter build apk --release
            ;;
          "web")
            flutter build web --release
            ;;
          "ios")
            flutter build ios --release --no-codesign
            ;;
          "macos")
            flutter build macos --release
            ;;
          "windows")
            flutter build windows --release
            ;;
        esac
      
    - name: Upload ${{ matrix.platform }} build
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-build
        path: |
          build/app/outputs/flutter-apk/app-release.apk
          build/web/
          build/ios/iphoneos/
          build/macos/Build/Products/Release/
          build/windows/runner/Release/

  # Security Analysis
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: dart
        queries: security-extended,security-and-quality
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Deploy to Supabase (Production)
  deploy-production:
    needs: [code-quality, build, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Build for production
      run: |
        flutter pub get
        flutter build web --release
        
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Deploy to Supabase
      run: |
        echo "üöÄ Starting production deployment to Supabase..."
        
        # Set environment variables from secrets
        export SUPABASE_ACCESS_TOKEN="${{ secrets.SUPABASE_ACCESS_TOKEN }}"
        export SUPABASE_DB_PASSWORD="${{ secrets.SUPABASE_DB_PASSWORD }}"
        
        # Validate required secrets
        if [ -z "$SUPABASE_ACCESS_TOKEN" ]; then
          echo "‚ùå Error: SUPABASE_ACCESS_TOKEN is not set"
          exit 1
        fi
        
        if [ -z "$SUPABASE_DB_PASSWORD" ]; then
          echo "‚ùå Error: SUPABASE_DB_PASSWORD is not set"
          exit 1
        fi
        
        echo "‚úÖ Secrets validated successfully"
        
        # Link to Supabase project
        echo "üîó Linking to Supabase project: tobler-crm"
        supabase link --project-ref vlapmwwroraolpgyfrtg
        
        # Deploy database migrations
        echo "üìä Deploying database migrations..."
        supabase db push
        
        # Deploy Edge Functions
        echo "‚ö° Deploying Edge Functions..."
        supabase functions deploy
        
        # Deploy configurations
        echo "‚öôÔ∏è Deploying configurations..."
        supabase config push
        
        echo "‚úÖ Production deployment completed successfully!"

  # Deploy to Supabase (Development)
  deploy-development:
    needs: [code-quality, build, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Build for development
      run: |
        flutter pub get
        flutter build web --release
        
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Deploy to Supabase (Development)
      run: |
        echo "üîß Starting development deployment to Supabase..."
        
        # Set environment variables from secrets
        export SUPABASE_ACCESS_TOKEN="${{ secrets.SUPABASE_ACCESS_TOKEN }}"
        export SUPABASE_DB_PASSWORD="${{ secrets.SUPABASE_DB_PASSWORD }}"
        
        # Validate required secrets
        if [ -z "$SUPABASE_ACCESS_TOKEN" ]; then
          echo "‚ùå Error: SUPABASE_ACCESS_TOKEN is not set"
          exit 1
        fi
        
        if [ -z "$SUPABASE_DB_PASSWORD" ]; then
          echo "‚ùå Error: SUPABASE_DB_PASSWORD is not set"
          exit 1
        fi
        
        echo "‚úÖ Secrets validated successfully"
        
        # Link to Supabase project
        echo "üîó Linking to Supabase project: tobler-crm"
        supabase link --project-ref vlapmwwroraolpgyfrtg
        
        # Deploy database migrations (development)
        echo "üìä Deploying database migrations (development)..."
        supabase db push
        
        # Deploy Edge Functions (development)
        echo "‚ö° Deploying Edge Functions (development)..."
        supabase functions deploy
        
        echo "‚úÖ Development deployment completed successfully!"

  # Notify Deployment Status
  notify:
    needs: [deploy-production, deploy-development]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ] || [ "${{ needs.deploy-development.result }}" == "success" ]; then
          echo "‚úÖ Deployment completed successfully!"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi 