name: Release Management

on:
  push:
    tags:
      - 'v*'

env:
  FLUTTER_VERSION: '3.24.5'

jobs:
  # Build Release Artifacts
  build-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [android, web, ios, macos, windows]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Build ${{ matrix.platform }}
      run: |
        case "${{ matrix.platform }}" in
          "android")
            flutter build apk --release
            ;;
          "web")
            flutter build web --release
            ;;
          "ios")
            flutter build ios --release --no-codesign
            ;;
          "macos")
            flutter build macos --release
            ;;
          "windows")
            flutter build windows --release
            ;;
        esac
      
    - name: Upload ${{ matrix.platform }} build
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-release
        path: |
          build/app/outputs/flutter-apk/app-release.apk
          build/web/
          build/ios/iphoneos/
          build/macos/Build/Products/Release/
          build/windows/runner/Release/

  # Create GitHub Release
  create-release:
    needs: build-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/android-release/**/*
          artifacts/web-release/**/*
          artifacts/ios-release/**/*
          artifacts/macos-release/**/*
          artifacts/windows-release/**/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deploy to Supabase (Production Release)
  deploy-release:
    needs: [build-release, create-release]
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Build for production release
      run: |
        flutter pub get
        flutter build web --release
        
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Deploy Release to Supabase
      run: |
        echo "üöÄ Deploying release ${{ github.ref_name }} to Supabase..."
        
        # Set environment variables from secrets
        export SUPABASE_ACCESS_TOKEN="${{ secrets.SUPABASE_ACCESS_TOKEN }}"
        export SUPABASE_DB_PASSWORD="${{ secrets.SUPABASE_DB_PASSWORD }}"
        export SUPABASE_DB_URL="${{ secrets.SUPABASE_DB_URL }}"
        
        # Validate required secrets
        if [ -z "$SUPABASE_ACCESS_TOKEN" ]; then
          echo "‚ùå Error: SUPABASE_ACCESS_TOKEN is not set"
          exit 1
        fi
        
        if [ -z "$SUPABASE_DB_PASSWORD" ]; then
          echo "‚ùå Error: SUPABASE_DB_PASSWORD is not set"
          exit 1
        fi
        
        if [ -z "$SUPABASE_DB_URL" ]; then
          echo "‚ùå Error: SUPABASE_DB_URL is not set"
          exit 1
        fi
        
        echo "‚úÖ Secrets validated successfully"
        
        # Link to Supabase project
        echo "üîó Linking to Supabase project: tobler-crm"
        supabase link --project-ref vlapmwwroraolpgyfrtg
        
        # Deploy database migrations
        echo "üìä Deploying database migrations..."
        supabase db push
        
        # Deploy Edge Functions
        echo "‚ö° Deploying Edge Functions..."
        supabase functions deploy
        
        # Deploy configurations
        echo "‚öôÔ∏è Deploying configurations..."
        supabase config push
        
        echo "‚úÖ Release deployment completed successfully!"
        echo "üéâ Release ${{ github.ref_name }} is now live!"

  # Notify Release Status
  notify-release:
    needs: [create-release, deploy-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify release status
      run: |
        if [ "${{ needs.create-release.result }}" == "success" ] && [ "${{ needs.deploy-release.result }}" == "success" ]; then
          echo "‚úÖ Release ${{ github.ref_name }} created and deployed successfully!"
        elif [ "${{ needs.create-release.result }}" == "success" ]; then
          echo "‚ö†Ô∏è Release ${{ github.ref_name }} created but deployment failed!"
        else
          echo "‚ùå Release creation failed!"
          exit 1
        fi 