name: iOS Bundle Build and Release

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]

jobs:
  build-ios-bundle:
    # Using macOS 14 instead of macos-latest to avoid deprecation warnings
    # macos-latest will migrate to macOS 15 on August 4, 2025
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.1'
        channel: 'stable'
        cache: true
        
    - name: Setup CocoaPods
      run: |
        echo "Installing/updating CocoaPods..."
        sudo gem install cocoapods
        pod --version
        
    - name: Show Flutter and Dart versions
      run: |
        flutter --version
        dart --version
        
    - name: Show available devices
      run: flutter devices
      

        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Clean and regenerate iOS project
      run: |
        flutter clean
        flutter pub get
        cd ios
        rm -rf Pods Podfile.lock
        # Update deployment target in project.pbxproj
        sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = 12.0;/IPHONEOS_DEPLOYMENT_TARGET = 13.0;/g' Runner.xcodeproj/project.pbxproj
        pod install --repo-update
        cd ..
        
    - name: Verify iOS project setup
      run: |
        echo "Checking iOS project structure..."
        ls -la ios/
        echo "Checking Podfile..."
        cat ios/Podfile
        echo "Checking deployment target in project.pbxproj..."
        grep "IPHONEOS_DEPLOYMENT_TARGET" ios/Runner.xcodeproj/project.pbxproj
        

        
    - name: Build iOS Bundle
      run: |
        echo "Building iOS bundle..."
        flutter build bundle --target-platform ios
        
    - name: Create ExportOptions.plist for IPA
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        echo "Creating ExportOptions.plist for IPA build..."
        echo '<?xml version="1.0" encoding="UTF-8"?>' > ios/ExportOptions.plist
        echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> ios/ExportOptions.plist
        echo '<plist version="1.0">' >> ios/ExportOptions.plist
        echo '<dict>' >> ios/ExportOptions.plist
        echo '    <key>method</key>' >> ios/ExportOptions.plist
        echo '    <string>app-store</string>' >> ios/ExportOptions.plist
        echo '    <key>teamID</key>' >> ios/ExportOptions.plist
        echo '    <string>${{ secrets.IOS_TEAM_ID }}</string>' >> ios/ExportOptions.plist
        echo '    <key>signingStyle</key>' >> ios/ExportOptions.plist
        echo '    <string>manual</string>' >> ios/ExportOptions.plist
        echo '    <key>stripSwiftSymbols</key>' >> ios/ExportOptions.plist
        echo '    <true/>' >> ios/ExportOptions.plist
        echo '    <key>uploadBitcode</key>' >> ios/ExportOptions.plist
        echo '    <false/>' >> ios/ExportOptions.plist
        echo '    <key>uploadSymbols</key>' >> ios/ExportOptions.plist
        echo '    <true/>' >> ios/ExportOptions.plist
        echo '</dict>' >> ios/ExportOptions.plist
        echo '</plist>' >> ios/ExportOptions.plist
        
    - name: Configure Bundle Identifier for IPA
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        echo "Configuring bundle identifier for IPA build..."
        # Set bundle identifier from secret or use default
        BUNDLE_ID="${IOS_BUNDLE_ID:-com.tobler.crm}"
        echo "Using bundle identifier: $BUNDLE_ID"
        
        # Update project.pbxproj with bundle identifier
        cd ios
        sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = .*;/PRODUCT_BUNDLE_IDENTIFIER = $BUNDLE_ID;/g" Runner.xcodeproj/project.pbxproj
        cd ..
        
    - name: Build iOS Bundle Only (Xcode not available for iOS in CI)
      run: |
        echo "Building iOS bundle only (Xcode iOS builds not available in CI)..."
        echo "This creates the Flutter assets needed for iOS deployment"
        echo "For full iOS builds, use local development environment with iOS simulators"
      
    - name: Verify iOS build output
      run: |
        echo "Checking iOS build output structure..."
        ls -la build/
        echo "Checking bundle output..."
        ls -la build/flutter_assets/ || echo "Bundle not found"
        
    - name: Upload iOS Bundle
      uses: actions/upload-artifact@v4
      with:
        name: ios-bundle
        path: build/flutter_assets/
        retention-days: 7
        
    - name: Note about iOS builds
      run: |
        echo "Note: Full iOS builds require local development environment with iOS simulators"
        echo "This CI workflow creates the Flutter bundle needed for iOS deployment"
        echo "To build complete iOS apps, run 'flutter build ios' locally"
        
    - name: Create IPA (if signing is configured)
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        echo "Building iOS IPA..."
        # Set up code signing environment
        echo "Setting up code signing..."
        
        # Create keychain and import certificates
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings build.keychain
        
        # Import certificates from secrets (you'll need to add these)
        if [ -n "${{ secrets.IOS_CERTIFICATE }}" ]; then
          echo "Importing iOS certificate..."
          echo "${{ secrets.IOS_CERTIFICATE }}" | base64 -d > ios_cert.p12
          security import ios_cert.p12 -k build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          rm ios_cert.p12
        fi
        
        # Import provisioning profile
        if [ -n "${{ secrets.IOS_PROVISIONING_PROFILE }}" ]; then
          echo "Importing provisioning profile..."
          echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 -d > ios_profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/
          cp ios_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          rm ios_profile.mobileprovision
        fi
        
        # Build IPA
        flutter build ipa --release --export-options-plist=ios/ExportOptions.plist
      
    - name: Verify IPA Creation
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        echo "Verifying IPA creation..."
        ls -la build/ios/ipa/ || echo "IPA directory not found"
        find build/ios/ipa/ -name "*.ipa" -type f || echo "No IPA files found"
        
    - name: Upload IPA (if created)
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: ios-ipa
        path: build/ios/ipa/
        retention-days: 30 
